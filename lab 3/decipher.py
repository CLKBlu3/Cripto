from Crypto.PublicKey import RSA
from Crypto.PublicKey.RSA import importKey
from fractions import gcd
import glob
import sympy

#openssl rsa -in lluis.marques_pubkeyRSA_RW.pem -pubin -text -modulus > nLluis.txt
#nLluis = 0x6BF82E20E326B049168EC61EC95F2DFE309A50518C45F03DD0F48CF487DF8A02015D4C0A3D0C73650A31D7680BBDB0C618CB8FC25796716D3AC11BD67EAA18F49788B2DA5B786EC0D1E328ECE5D468239AFBC0D697101CCCF6CF4C2E0DEB1501A3856B83F65F84A3FF03E59D29D59D5D3FD98649F511F3A5C1DF7E14F4B333FD03EDE6957D359896A3B996463EDC88024DCE7A2A05CFF39167F4F283D6FCD0D06CE26E18A4EE90AD40FEBE97126D2039B810D4CC3F39C718A4F04B4B63FE9423EC0E0304DC9C4AABA89D2ED1D46B8C8EBE3B803FFDCCADC44FC1FA7001F6A7EB47B1452AEC79D8571E981424EB0D49600A695027139FEA9A21056A663C9CA1F3
nLluis = 13629880843969745206869321622531147773350606398044280660017628855797494543845801959830787166331113599304905780469722761711892630572313043406484099694261585358561771840828557880205262672207386005433697583174962172857042976189462454594971609299556954610211268110795395359751150527849549744696986564367676545644934674075212970637060668036140586088947050196522312299607411075059458717601132700409630716603137562911532353631584758395577101742233674598247092540806392903215808028113066276980129965389726502726414809100061328475316333496935893822819911733615259436141636881725005807031593449933580726129415612608001246798323
e = 2**16+1

#openssl rsa -in antonio.guilera_pubkeyRSA_RW.pem  -pubin -text -modulus > nToni.txt
#nToni = 0x7CFCCC2F04FC7F898B8463F21B562B7F560DB57DCC593A1ADC508BC02709A3768048BA4934F393BB862A9BDEF42B651A11227AB1D232B951CC93D43FE8B90615C1F21165F189B7A5A65EADDF097F1E8DBE43A096E22ACF50E4AEAA45F76A6EF5A73DF952E1550CBA151D8A54BAC9C919702C4CA49C7ED76151302122AFA0491740EF5E39D8E2E38DDA35188E9992980D9E380D45A97652A4E74966B0EAB98A5A8AB1991ADA9516860FC235790047221E6E2204EB514AB98CA30011B294DE571792FF7B7954E06CC2C6CD9C328DE9F037F6700F514F971F7BE440B0614FA70A76B2539E09AD399204338CD07E88AB035A2021E3A52BF93995DB08F09D60919097
nToni = 15778208954743175312615126887588304627797381754463934141857986550228820727778604550969627738187150003716973616825215509072649092235161481377616436142777900995982240350737072500168452413279297097946998788770424976470349911375308733732763145993943392239802711557984205015758614117359557066146045753913361295021508226471606538035438156603353642595065506243895563262260473237566039473119341027270599045354483691872381355367346954120936662941060093401158352215965917168999474304532735812278726219042388990546370652470040412923697129384682918983693012849427341514832597648712669798569247094179796089246277356889037134205079

'''
Si dues claus K = PQ i L = PA, llavors gcd(K,L) = P i llavors, Q = K/P i A = L/P
'''


	
	
def decrypt(modulus):
	for f in glob.glob('RSA_RW-20191119/*pubkeyRSA_RW*.pem'):
		aux = open(f)
		key = importKey(aux.read())
		if(gcd(modulus, key.n) != 1):
			print("Clau compartida amb: " + str(aux.name))
			print("key auxiliar: " + str(key.n))
			return gcd(modulus, key.n) #trobat un dels primers que formen la clau
	return -1
		
		
		
def main():
	print('----------------LluÃ­s----------------')
	prime = decrypt(nLluis)
	print("P: ")
	print(prime)
	print("Q: ")
	prime2 = nLluis//prime
	print(prime2)
	phi_n = (prime - 1) * (prime2 - 1)
	dLluis = sympy.gcdex(e, phi_n)[0]
	privateLluis = RSA.construct((nLluis, e, int(dLluis)))
	outputLluis = open('keyLluis.pem', 'wb')
	outputLluis.write(privateLluis.exportKey('PEM'))
	outputLluis.close()
	
	print('----------------Toni----------------')
	prime3 = decrypt(nToni)
	print("P: ")
	print(prime3)
	print("Q: ")
	prime4 = nToni//prime3
	print(prime4)
	phi_n = (prime3 - 1) * (prime4 - 1)
	dToni = sympy.gcdex(e, phi_n)[0]
	privateToni = RSA.construct((nToni, e, int(dToni)))
	outputToni = open('keyToni.pem', 'wb')
	outputToni.write(privateToni.exportKey('PEM'))
	outputToni.close()
	
	print('-------------------------------------DONETTE-------------------------------------')
	
main()


'''
maple:
nToni = convert("7CFCCC2F04FC7F898B8463F21B562B7F560DB57DCC593A1ADC508BC02709A3768048BA4934F393BB862A9BDEF42B651A11227AB1D232B951CC93D43FE8B90615C1F21165F189B7A5A65EADDF097F1E8DBE43A096E22ACF50E4AEAA45F76A6EF5A73DF952E1550CBA151D8A54BAC9C919702C4CA49C7ED76151302122AFA0491740EF5E39D8E2E38DDA35188E9992980D9E380D45A97652A4E74966B0EAB98A5A8AB1991ADA9516860FC235790047221E6E2204EB514AB98CA30011B294DE571792FF7B7954E06CC2C6CD9C328DE9F037F6700F514F971F7BE440B0614FA70A76B2539E09AD399204338CD07E88AB035A2021E3A52BF93995DB08F09D60919097", decimal, hex)
nLluis = convert("6BF82E20E326B049168EC61EC95F2DFE309A50518C45F03DD0F48CF487DF8A02015D4C0A3D0C73650A31D7680BBDB0C618CB8FC25796716D3AC11BD67EAA18F49788B2DA5B786EC0D1E328ECE5D468239AFBC0D697101CCCF6CF4C2E0DEB1501A3856B83F65F84A3FF03E59D29D59D5D3FD98649F511F3A5C1DF7E14F4B333FD03EDE6957D359896A3B996463EDC88024DCE7A2A05CFF39167F4F283D6FCD0D06CE26E18A4EE90AD40FEBE97126D2039B810D4CC3F39C718A4F04B4B63FE9423EC0E0304DC9C4AABA89D2ED1D46B8C8EBE3B803FFDCCADC44FC1FA7001F6A7EB47B1452AEC79D8571E981424EB0D49600A695027139FEA9A21056A663C9CA1F3", decimal, hex)
'''

'''
decToni = openssl rsautl -decrypt -inkey keyToni.pem -in antonio.guilera_RSA_RW.enc -out decToni
decLluis = openssl rsautl -decrypt -inkey keyLluis.pem -in lluis.marques_RSA_RW.enc -out decLluis

Per obtenir la clau publica: openssl rsa -in lluis.marques_pubkeyRSA_RW.pem -pubin -text -modulus > salida.txt
'''

'''
decAES:
openssl enc -d -aes-128-cbc -pbkdf2 -in lluis.marques_AES_pseudo.enc -out lluisAESdec

'''
