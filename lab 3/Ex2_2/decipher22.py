from Crypto.PublicKey import RSA
from Crypto.PublicKey.RSA import importKey
from fractions import gcd
import glob
import sympy

#openssl rsa -in lluis.marques_pubkeyRSA_RW.pem -pubin -text -modulus > nLluis2.txt
#nLluis = 0x16344ADF18DD4A986DB05E753C2E3B7A0D164A3CB55CE3B954513813919937D28172E22C9B1907C8A6FC8A90BD664DFC4614DB00154D9E95FF736825AC6807B9D14ABA0121DD62C2D3D8D55B572AC9A91EA7819D22FDF322B0E36E90D41D2D115D1F306ADFAB96B848A8824B4FB506A2BD8E64BB5D6CE54FFD192177F0DF46A371380491B57505E5A8AF1E4AA0088A4D896DDB288C5A5E438E497578DCF0D32686AFDD6AA8FAACF9824C5DDAB85F15A205E7DCDF5CE8DFBA9537674537E4634365DF9AAF6EA8DB00C8500143BF67CFCE2A335E8C0D3EF28F78A63B581248B2763983C8C408F27466BA0389B5BE1584316CFCCE5008800B51E48BFBFC9AFED1
nLluis = 10949332365822354014710532722777485230596650280717099494954708341571812313158303123892251521654844032366538178016020237633613495221079392946082793422520723644490905470737279520959809848107463779717504177644008805222273785629922327683106595255192600440955819528571500844490158264306264356257491178651058597950295690773821478470169143812450248275150327004983421339602662023213319735128125586057539650401406083960183683533482566780647588301971095753507178504546902875770953188384534568014705236119017739987456493204739827652790339515104414248858265854993002453282544637831398846362642614980771893466632797933643955921 
e = 2**16+1

#openssl rsa -in antonio.guilera_pubkeyRSA_RW.pem  -pubin -text -modulus > nToni2.txt
#nToni = 0xC5B9EDABB23156279824E271DCFE5EBD9674C21440B1CE1D267FD310B03B5B0263CF3CF7D329FA4119FA59729E0A18D05A680ACB796E63B267E9DE4E22F5EC2FC1A32FABB43FB640B1454FE51585373B277A93075D3A0C2B38FD320DC3B011F6F3CF811AF4193B1D09D74CFDEE24170CDF52E589CF5A5290123D571E9E62F90CC3A4C81AE144A62D8AA0D9750C3A45E3F695B23AC0331C772E03257EFB955725D0B58D0C51449476720F85F9F625006B52BCBA9D8D53A15ED9083451DDF7DFDD636BEE0BD879E4D4B6D32108D00A20192BA5CF8CF98491D9AD8EB8BE580711670AD4C768F2119D05EEA0E42E5FD8085474A941A137AFF7144650F53FD19CA1
nToni = 97502464023608659673880581817119506252693236153703016045577763524391919306840163448416805325709454944000654037261019182458788101967629338363146004721396802771098661229837432626062338823608816308464006936685310734181042493462143147101499681040341893723747455144054048087669252835205845048652525207933050319472854567500727023512125191996499117852790827329188875672650536804137082558745040768887150132250305377517263402266415989605019345235380261489764763116338484605894584865896049385966077045035057529593269543650361954778240880875351301307781791121012818801759506574158963262226756254156351040435343488276090690721
'''
Si dues claus K = PQ i L = PA, llavors gcd(K,L) = P i llavors, Q = K/P i A = L/P
'''	
		
def main():
	print('----------------LluÃ­s----------------')
	print(sympy.factorint(nLluis))
	#115281056474331054700251942688513962925044855473544908166056180479356817897219  4 veces
	#3347812451 32 veces
	print("phi(p): ")
	p = 115281056474331054700251942688513962925044855473544908166056180479356817897219**4
	p_1 = (p - 1) * (p ** 3)
	print(p_1)
	print("phi(q): ")
	q = 3347812451**32
	q_1 = (q - 1) * (q ** 31)
	print(q_1)
	print("phi(n): ")
	phi_n = p_1 * q_1
	print(phi_n)	
	dLluis = sympy.gcdex(e, phi_n)[0]
	privateLluis = RSA.construct((nLluis, e, int(dLluis)))

	outputLluis = open('keyLluis2.pem', 'wb')
	outputLluis.write(privateLluis.exportKey('PEM'))
	outputLluis.close()
	
	#openssl rsautl -decrypt -inkey keyLluis2.pem -in lluis.marques_RSA_pseudo.enc -out decLluis2


	print('----------------Toni----------------')
	print(sympy.factorint(nToni))
	#3916392617 32 veces 
	#238276963031717718724382324364818146621 8 veces
	p2 = 3916392617 ** 32
	p2_1 = (p2 - 1) * (p2 ** 31)
	print("phi(p2): ")
	print(p2_1)
	print("phi(q2): ")
	q2 = 238276963031717718724382324364818146621 ** 8
	q2_1 = (q2 - 1) * (q2**7)
	print(q2_1)
	print("phi(n2): ")
	phi_n2 = p2_1 * q2_1
	print(phi_n2)
	dToni = sympy.gcdex(e, phi_n2)[0]
	dToni = dToni % phi_n2   # dona negatiu, cal fer modul
	privateToni = RSA.construct((nToni, e, int(dToni)))
	
	outputToni = open('keyToni2.pem', 'wb')
	outputToni.write(privateToni.exportKey('PEM'))
	outputToni.close()
	
	#openssl rsautl -decrypt -inkey keyToni2.pem -in antonio.guilera_RSA_pseudo.enc -out decToni2
	
	print('-------------------------------------DONETTE-------------------------------------')
	
main()


'''
decToni = openssl rsautl -decrypt -inkey keyToni.pem -in antonio.guilera_RSA_RW.enc -out decToni
decLluis = openssl rsautl -decrypt -inkey keyLluis.pem -in lluis.marques_RSA_RW.enc -out decLluis

Per obtenir la clau publica: openssl rsa -in lluis.marques_pubkeyRSA_RW.pem -pubin -text -modulus > salida.txt
'''
'''
decAES
openssl enc -d -aes-128-cbc -pbkdf2 -in lluis.marques_AES_pseudo.enc -out lluisAESdec
'''
